<?php
/**
 * This file contains hook implementations for the Acumulus addon.
 *
 * This file will be detected and loaded by WHMCS on every page load,
 * {@see https://developers.whmcs.com/hooks/module-hooks/}
 *
 * @noinspection PhpUnused  Hooks are called from the WHMCS system based on
 *    naming patterns.
 */
if (!defined('WHMCS')) {
    die('This file cannot be accessed directly');
}

use WHMCS\Database\Capsule;

require_once('acumulus_connect_functions.php');

/**
 * This hook is run when:
 * - A new invoice has been generated following sending the Invoice Created
 *   email (hook 'InvoiceCreated') .
 * - A new invoice has been generated by the cron, order process, API, when
 *   converting a quote to an invoice, or when published a draft invoice with
 *   email. This is run before the invoice is sent to the client (hook
 *   'InvoiceCreationPreEmail').
 *
 * @param array $vars
 */
function acumulus_connect_triggerInvoiceCreationPreEmailHook(array $vars): void
{
    $invoiceId = $vars['invoiceid'];
    $config = acumulus_connect_get_config();
    if ($config['acumulus_hook_invoice_create_enabled'] === 'on') {
        // Check if invoice id and invoice token are already stored and, if so,
        // skip sending the invoice.
        if (!Capsule::table('mod_acumulus_connect')->where('id', $invoiceId)->exists()) {
            // No token exists, send the invoice.
            logActivity(__FUNCTION__ . "($invoiceId): sending");
            acumulus_connect_sendInvoice($config, $invoiceId);
        } else {
            logActivity(__FUNCTION__ . "($invoiceId): not sending, already sent");
        }
    } else {
        logActivity(__FUNCTION__ . "($invoiceId): not sending, hook disabled");
    }
}

/**
 * This hook is run when:
 * - An invoice is paid prior to any email or automation tasks associated with
 *   the payment action having been run.
 *
 * @param array $vars
 */
function acumulus_connect_triggerInvoicePaidHook(array $vars): void
{
    $invoiceId = $vars['invoiceid'];
    $config = acumulus_connect_get_config();
    if ($config['acumulus_hook_invoice_paid_enabled'] === 'on') {
        logActivity(__FUNCTION__ . "($invoiceId): updating");
        acumulus_connect_updateInvoice($config, $invoiceId);
    } else {
        logActivity(__FUNCTION__ . "($invoiceId): not updating, hook disabled");
    }
}

/**
 * This hook is run when:
 * - Changing the gateway on an invoice.
 *
 * @param array $vars
 */
function acumulus_connect_triggerInvoiceChangeGatewayHook(array $vars): void
{
    $config = acumulus_connect_get_config();
    $invoiceId = $vars['invoiceid'];
    $paymentMethod = $vars['paymentmethod'];
    logActivity(__FUNCTION__ . "($invoiceId): changing payment method to $paymentMethod");
    acumulus_connect_updateInvoicePaymentMethod($config, $invoiceId, $paymentMethod);
}

/**
 * This hook is run when:
 * - An invoice is canceled. This function reacts by creating a credit invoice.
 *
 * @param array $vars
 */
function acumulus_connect_triggerInvoiceCanceledHook(array $vars): void
{
    $invoiceId = $vars['invoiceid'];
    $config = acumulus_connect_get_config();
    if ($config['acumulus_hook_invoice_canceled_enabled'] === 'on') {
        logActivity(__FUNCTION__ . "($invoiceId): creating credit invoice");
        acumulus_connect_InvoiceCanceled($config, $invoiceId);
    } else {
        logActivity(__FUNCTION__ . "($invoiceId): not creating credit invoice, hook disabled");
    }
}

add_hook('InvoiceCreated', 500, 'acumulus_connect_triggerInvoiceCreationPreEmailHook');
add_hook("InvoiceCreationPreEmail", 500, 'acumulus_connect_triggerInvoiceCreationPreEmailHook');
add_hook("InvoicePaid", 1, 'acumulus_connect_triggerInvoicePaidHook');
add_hook('InvoiceChangeGateway', 1, 'acumulus_connect_triggerInvoiceChangeGatewayHook');
add_hook('InvoiceCancelled', 1, 'acumulus_connect_triggerInvoiceCanceledHook');
