<?php
/**
 * This file contains hook implementations for the Acumulus addon.
 *
 * This file will be detected and loaded by WHMCS on every page load,
 * {@see https://developers.whmcs.com/hooks/module-hooks/}
 *
 * @noinspection PhpUnused  Hooks are called from the WHMCS system based on
 *    naming patterns.
 */

declare(strict_types=1);

if (!defined('WHMCS')) {
    die('This file cannot be accessed directly');
}

use WHMCS\Database\Capsule;

require_once(__DIR__ . '/acumulus_connect_functions.php');

/**
 * Hook 'InvoiceCreated'.
 */
function acumulus_connect_hook_invoiceCreated(array $vars): void
{
    acumulus_connect_invoiceCreated($vars, 'InvoiceCreated');
}

/**
 * Hook 'InvoiceCreationPreEmail'.
 */
function acumulus_connect_hook_invoiceCreationPreEmail(array $vars): void
{
    acumulus_connect_invoiceCreated($vars, 'InvoiceCreationPreEmail');
}

/**
 * This hook is run when:
 * - A new invoice has been generated following sending the Invoice Created
 *   email (hook 'InvoiceCreated') .
 * - A new invoice has been generated by the cron, order process, API, when
 *   converting a quote to an invoice, or when published a draft invoice with
 *   email. This is run before the invoice is sent to the client (hook
 *   'InvoiceCreationPreEmail').
 *
 * @param array $vars
 * @param string $hook
 */
function acumulus_connect_invoiceCreated(array $vars, string $hook): void
{
    logActivity(__FUNCTION__ . "('$hook'): start");
    try {
        $invoiceId = $vars['invoiceid'];
        $config = acumulus_connect_get_config();
        if ($config['acumulus_hook_invoice_create_enabled'] === 'on') {
            // Check if invoice id and invoice token are already stored and, if so,
            // skip sending the invoice.
            if (!Capsule::table('mod_acumulus_connect')->where('id', $invoiceId)->exists()) {
                // No token exists, send the invoice.
                logActivity(__FUNCTION__ . "($invoiceId, '$hook'): sending");
                acumulus_connect_sendInvoice($config, $invoiceId);
            } else {
                logActivity(__FUNCTION__ . "($invoiceId, '$hook'): not sending, already sent");
            }
        } else {
            logActivity(__FUNCTION__ . "($invoiceId, '$hook'): not sending, hook disabled");
        }
    } catch (Throwable $e) {
        acumulus_logException($e);
    }
}

/**
 * Hook 'invoicePaid'.
 *
 * This hook is run when:
 * - An invoice is paid prior to any email or automation tasks associated with
 *   the payment action having been run.
 *
 * @param array $vars
 */
function acumulus_connect_hook_invoicePaid(array $vars): void
{
    logActivity(__FUNCTION__ . ': start');
    try {
        $invoiceId = $vars['invoiceid'];
        $config = acumulus_connect_get_config();
        if ($config['acumulus_hook_invoice_paid_enabled'] === 'on') {
            logActivity(__FUNCTION__ . "($invoiceId): updating");
            acumulus_connect_updateInvoice($config, $invoiceId);
        } else {
            logActivity(__FUNCTION__ . "($invoiceId): not updating, hook disabled");
        }
    } catch (Throwable $e) {
        acumulus_logException($e);
    }
}

/**
 * Hook 'invoiceChangeGateway'.
 *
 * This hook is run when:
 * - Changing the gateway on an invoice.
 *
 * @param array $vars
 */
function acumulus_connect_hook_invoiceChangeGateway(array $vars): void
{
    logActivity(__FUNCTION__ . ': start');
    try {
        $config = acumulus_connect_get_config();
        $invoiceId = $vars['invoiceid'];
        $paymentMethod = $vars['paymentmethod'];
        logActivity(__FUNCTION__ . "($invoiceId): changing payment method to $paymentMethod");
        acumulus_connect_updateInvoicePaymentMethod($config, $invoiceId, $paymentMethod);
    } catch (Throwable $e) {
        acumulus_logException($e);
    }
}

/**
 * Hook 'invoiceCancelled'.
 *
 * This hook is run when:
 * - An invoice is cancelled. This function reacts by creating a credit invoice.
 *
 * @param array $vars
 */
function acumulus_connect_hook_invoiceCancelled(array $vars): void
{
    logActivity(__FUNCTION__ . ': start');
    try {
        $invoiceId = $vars['invoiceid'];
        $config = acumulus_connect_get_config();
        if ($config['acumulus_hook_invoice_canceled_enabled'] === 'on') {
            logActivity(__FUNCTION__ . "($invoiceId): creating credit invoice");
            acumulus_connect_InvoiceCancelled($config, $invoiceId);
        } else {
            logActivity(__FUNCTION__ . "($invoiceId): not creating credit invoice, hook disabled");
        }
    } catch (Throwable $e) {
        acumulus_logException($e);
    }
}

add_hook('InvoiceCreated', 500, 'acumulus_connect_hook_invoiceCreated');
add_hook('InvoiceCreationPreEmail', 500, 'acumulus_connect_hook_invoiceCreationPreEmail');
add_hook('InvoicePaid', 1, 'acumulus_connect_hook_invoicePaid');
add_hook('InvoiceChangeGateway', 1, 'acumulus_connect_hook_invoiceChangeGateway');
add_hook('InvoiceCancelled', 1, 'acumulus_connect_hook_invoiceCancelled');
